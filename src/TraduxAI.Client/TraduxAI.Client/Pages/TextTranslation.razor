@page "/translate"
@attribute [Authorize]
@using TraduxAI.Shared.Models
@using TraduxAI.Client.Services
@inject IDocumentProcessingService DocumentService
@inject IJSRuntime JSRuntime

<h3 class="fw-bold">Text Translation</h3>
<div class="row">
	<div class="col-md-6">
		<div class="mb-3">
			<label class="form-label fw-bold">Source Language</label>
			<select class="form-select" @bind="SourceLanguage">
				@foreach (var lang in Languages)
				{
					<option value="@lang.Code">@lang.Label</option>
				}
			</select>
		</div>

		<div class="mb-3">
			<label class="form-label fw-bold">Source Text</label>
			<textarea class="form-control" rows="10" @bind="SourceText"></textarea>
		</div>
		<!-- Nuevo campo Prompt -->
		<div class="mb-3">
			<label class="form-label fw-bold">Prompt</label>
			<input class="form-control" type="text" placeholder="Enter a prompt" @bind="Prompt" />
		</div>
		<input type="submit" class="btn btn-success" value="Execute translate" onclick="@TranslateText" disabled="@(string.IsNullOrEmpty(SourceText) || IsProcessing)" />

		@if (IsProcessing)
		{
			<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
			<span>Translating...</span>

		}


	</div>

	<div class="col-md-6">
		<div class="mb-3">
			<label class="form-label fw-bold">Target Language</label>
			<select class="form-select" @bind="TargetLanguage">
				@foreach (var lang in Languages.Where(l => l.Code != "auto"))
				{
					<option value="@lang.Code">@lang.Label</option>
				}
			</select>
		</div>

		<div class="">
			<div class="mb-3">
				<label class="form-label fw-bold">Translate Text</label>
				<textarea class="form-control" rows="10" @bind="TranslatedText" readonly />
			</div>
		</div>
	</div>
	@if (!string.IsNullOrEmpty(TranslatedText))
	{
		<button class="btn btn-secondary" @onclick="CopyToClipboard">Copy to Clipboard</button>
	}
</div>
@code {
	private string SourceText = string.Empty;
	private string TranslatedText = string.Empty;
	private string SourceLanguage = "auto";
	private string TargetLanguage = "en";
	private bool IsProcessing = false;
	private string Prompt = string.Empty;

	private List<(string Code, string Label)> Languages = new()
	{
		("auto", "Auto Detect"),
		("en", "English"),
		("es", "Spanish"),
		("fr", "French"),

	};

	private async Task TranslateText()
	{
		if (string.IsNullOrWhiteSpace(SourceText) && string.IsNullOrWhiteSpace(Prompt)) return;
		IsProcessing = true;
		try
		{
			var promtsSourceTest = $"{Prompt}{SourceLanguage}";
			var result = await DocumentService.TranslateTextAsync(promtsSourceTest, SourceLanguage, TargetLanguage);
			TranslatedText = result.ProcessedContent;
		}
		catch (Exception ex)
		{
			TranslatedText = $"Error: {ex.Message}";
		}
		finally
		{
			IsProcessing = false;
		}
	}

	private async Task CopyToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", TranslatedText);
	}


}
