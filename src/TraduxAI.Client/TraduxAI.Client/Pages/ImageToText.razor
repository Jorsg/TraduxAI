@page "/image-to-text"
@using TraduxAI.Shared.Models
@using TraduxAI.Client.Services
@using TraduxAI.Client.Components
@inject IDocumentProcessingService DocumentService

<h3>ImageToText</h3>

<div class="row">
	<div class="col-md-6">
		<FileUpload Accept="image/*" OnFileSelected="HandleImageSelected" />

		@if (!string.IsNullOrEmpty(PreviewUrl))
		{
			<div class="mb-3">
				<img src="@PreviewUrl" class="img-fluid border rounded" alt="Selected image" />
			</div>
		}
		<input type="submit" class="btn btn-success" value="Execute imag to text" onclick="@ProcessImage" disabled="@(SelectedFile == null || IsProcessing)" />
		@*   <button class="btn btn-primary" @onclick="ProcessImage" disabled="@(SelectedFile == null || IsProcessing)"> *@
		@if (IsProcessing)
		{
			<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
			<span>Processing...</span>
		}
		
		@* </button> *@
	</div>

	<div class="col-md-6">
		<TextOutput Label="Extracted Text" Text="@ExtractedText" Rows="10" />
	</div>
</div>

@code {
	private IBrowserFile? SelectedFile;
	private string? PreviewUrl;
	private string ExtractedText = string.Empty;
	private bool IsProcessing = false;


	private async Task HandleImageSelected(IBrowserFile file)
	{
		SelectedFile = file;
		ExtractedText = string.Empty;
		// Para la vista previa: leer el archivo y convertir a base64
		using var stream = file.OpenReadStream(file.Size);
		using var ms = new MemoryStream();
		await stream.CopyToAsync(ms);
		PreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
	}
	private async Task ProcessImage()
	{
		if (SelectedFile == null) return;

		IsProcessing = true;
		try
		{
			using var stream = SelectedFile.OpenReadStream(10 * 1024 * 1024);
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			var imageBytes = ms.ToArray();

			var result = await DocumentService.ProcessImageToTextAsync(imageBytes);
			ExtractedText = result.ProcessedContent;
		}
		catch (Exception ex)
		{
			ExtractedText = $"Error: {ex.Message}";
		}
		finally
		{
			IsProcessing = false;
		}
	}
}
