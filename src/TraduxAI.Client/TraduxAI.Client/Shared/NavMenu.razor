@using TraduxAI.Client.Providers
@using TraduxAI.Client.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider



<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TraduxAI.Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>       
    </div>
</div>
<div class="">
    <button class="btn btn-light" @onclick="Logout">
        <span class="oi oi-account-logout" aria-hidden="true"></span>Logout
    </button>
</div>


<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="image-to-text">
                <span class="oi oi-plus" aria-hidden="true"></span> Image To Text
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="pdf-to-text">
				<span class="oi oi-list-rich" aria-hidden="true"></span> PDF To Text
            </NavLink>
        </div>
         <div class="nav-item px-3">
            <NavLink class="nav-link" href="translate">
				<span class="oi oi-list-rich" aria-hidden="true"></span> Translate
            </NavLink>
        </div>       
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        if (AuthStateProvider is JwtAuthenticationStateProvider customAuthProvider)
        {
            // Notificar al proveedor que el usuario ya no está autenticado
            //customAuthProvider.NotifyUserAuthentication(string.Empty);
        }
        Navigation.NavigateTo("/login");
    }
}
